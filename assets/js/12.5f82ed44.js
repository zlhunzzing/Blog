(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{279:function(e,t,a){"use strict";a.r(t);var s=a(13),n=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"bem이란"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bem이란"}},[e._v("#")]),e._v(" BEM이란?")]),e._v(" "),t("p",[e._v("BEM(Block, Element, Modifier)은 컴포넌트 기반 웹 개발 접근방식이다. UI를 독립적인 Block들로 나누는 방식으로, 복잡한 UI에서 쉽고 빠르게 인터페이스를 개발할 수 있고, 기존 코드를 재사용하기 편리하다.")]),e._v(" "),t("h2",{attrs:{id:"block"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#block"}},[e._v("#")]),e._v(" Block")]),e._v(" "),t("p",[e._v("블록은 재사용할 수 있는 기능적으로 독립적인 구성 요소이다. HTML에서 블록은 class 속성으로 표시된다.")]),e._v(" "),t("ul",[t("li",[e._v("블록 이름은 상태(어떻게 생겼는지 ㅡ red 혹은 big)가 아니라 목적(무엇인지 ㅡ menu 혹은 button)을 나타낸다.")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('\x3c!-- 바른 예. `error`는 의미론적으로 사용되어짐 --\x3e\n<div class="error"></div>\n\n\x3c!-- 틀린 예. 외관을 설명하고 있음 --\x3e \n<div class="red-text"></div>\n')])])]),t("h2",{attrs:{id:"element"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#element"}},[e._v("#")]),e._v(" Element")]),e._v(" "),t("p",[e._v("엘리먼트는 별도로 쓸 수 없는 블록의 합성 부품이다.")]),e._v(" "),t("ul",[t("li",[e._v("엘리먼트 이름은 상태(어떤 유형, 어떻게 생겼는지 ㅡ red, big, etc.)가 아니라 목적(이게 무엇인지 ㅡ item, text, etc.)을 설명한다.")]),e._v(" "),t("li",[e._v("엘리먼트의 전체 이름 구조는 block-name__element-name이다. 엘리먼트 이름은 언더바 두 개(__)로 블록 이름과 구분된다.")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('\x3c!-- 바른 예. 전체 엘리먼트의 이름 구조는 다음 패턴을 따름.\n--\x3e \n<form class="search-form">\n    <div class="search-form__content">\n        \x3c!-- `search-form` 블록의 `input` 요소 --\x3e\n        <input class="search-form__input">\n        \x3c!-- `search-form` 블록의 `button` 요소--\x3e\n        <button class="search-form__button">Search</button>\n    </div>\n</form>\n\n\x3c!-- 틀린 예. 전체 엘리먼트의 이름 구조는 다음 패턴을 따르지 않음. --\x3e \n<form class="search-form">\n    <div class="search-form__content">\n        \x3c!-- 권장사항: `search-form__input` or\n                    search-form__content-input` --\x3e\n        <input class="search-form__content__input">\n        \x3c!-- 권장사항: `search-form__button` or\n                   `search-form__content-button` --\x3e\n        <button class="search-form__content__button">Search</button>\n    </div>\n</form>\n')])])]),t("h2",{attrs:{id:"modifier"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#modifier"}},[e._v("#")]),e._v(" Modifier")]),e._v(" "),t("p",[e._v("모디파이어는 블록이나 엘리먼트의 모양, 상태 또는 동작을 정의하는 개체이다.")]),e._v(" "),t("ul",[t("li",[e._v("모디파이어 이름은 모양(어떤 크기, 어떤 테마 등 ㅡ size_s, theme_islands), 상태(어떻게 다른지 ㅡ disabled, focused) 및 동작(어떻게 동작하는가 또는 어떻게 사용자에게 반응하는가 ㅡ directions_left-top)을 설명한다.")]),e._v(" "),t("li",[e._v("모디파이어 이름은 대시(-)로 블록 또는 엘리먼트 이름과 구분된다.")]),e._v(" "),t("li",[e._v("모다파이어의 이름 구조는 다음 패턴을 따른다.\n"),t("ul",[t("li",[e._v("block-name_modifier-name")]),e._v(" "),t("li",[e._v("block-name__element-name_modifier-name")])])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('\x3c!-- `search-form` 블록에는 `focused` Boolean 모디파이어가 있습니다. --\x3e \n<form class="search-form search-form_focused">\n    <input class="search-form__input">\n    \x3c!-- ` button` 요소에는 `disabled` Boolean 모디파이어가 있습니다. --\x3e \n    <button class="search-form__button search-form__button_disabled">Search</button>\n</form>\n')])])]),t("p",[e._v("BEM을 사용함으로써 의미를 쉽게 파악하고, 블록 단위의 독립적인 구성을 통해 확장성 있게 개발할 수 있다.")]),e._v(" "),t("h3",{attrs:{id:"참고문서"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#참고문서"}},[e._v("#")]),e._v(" 참고문서")]),e._v(" "),t("p",[e._v('"Quick start" bem.info, https://en.bem.info/methodology/quick-start, accessed: 2022년 9월 1일')]),e._v(" "),t("Comment")],1)}),[],!1,null,null,null);t.default=n.exports}}]);